# -*- coding: utf-8 -*-
"""
Created on Tue Feb 25 11:38:15 2020

@author: omn
"""

# Goal: automates SESSA simulations and collects simulated result. Python version 3
import os
import glob
import subprocess
import sys
import csv
from datetime import datetime
import re

sessa_dir = r'C:\Program Files (x86)\SESSA v2.1.1\bin\\' #your sessa directory
# SET THE FOLDER WITH THE SESSION FILES IN BELOW
path = os.getcwd()
all_subdirs = [d for d in os.listdir('.') if os.path.isdir(d)]
latest_subdir = max((os.path.getmtime(f),f) for f in all_subdirs)[1]
sessa_session_dir = os.path.abspath(latest_subdir)+'\\'
#sessa_session_dir = os.getcwd()+'\\'  # r'd:\Profile\omn\Eigene Dateien\sessa simulations\session files 2020-03-18 15-26\\' #the r infront lets it read this path format
# REMEMBER THE 2 SLASHES \\ on the end iffds SUPER important!
# Intended directory for the result to be saved in, CREATE THE FOLDER FIRST
sessa_result_dir = sessa_session_dir+'\\results\\'  #r'd:\Profile\omn\Eigene Dateien\sessa simulations\session files 2020-03-18 15-26\results\\'
# The folder where session files are located, grabs all session files' path into a list
sessa_file_path = glob.glob(sessa_session_dir + '*.txt') #using glob.glob and a * means it will search for any with the *
#sessa_file_path = glob.glob('C:\Users\omn\Nextcloud\SESSA Python\session files 2020-02-26 11-35\results\*.SES') #using glob.glob and a * means it will search for any with the *
#sessa_file_path = glob.glob('C:\\temp\\*.SES')

os.mkdir(sessa_result_dir) #creates a result folder inside the folder

#sessa_result_dir = 'C:\\temp\\result\\'
session_file_name = [] # creates empty list for store file names
#for (dirpath, firnames, filenames) in os.walk(sessa_session_dir):
#    for file in filenames:
#        if file.endswith(".txt"):
#            session_file_name.extend(filenames) # save file names into a list
#        break
os.chdir(sessa_session_dir)
for (dirpath, firnames, filenames) in os.walk(sessa_session_dir, topdown=True):
    session_file_name.extend(glob.glob('*.txt')) # save file names into a list
    break

#for file in os.listdir(sessa_session_dir): #these 3 lines just add letter by letter to the list 
#    if os.path.isfile(os.path.join(sessa_session_dir, file)):
#        session_file_name.extend(file)

if len(session_file_name) is 0:
    sys.exit('Error, no session file found in the target folder')
# Write to the session file and generate a line at the end for saving result
for p in range(len(session_file_name)):
    #print(p)
    #with open(current_folder_dir + '\\%s.txt' % file_name, 'w') as session_file: 
    with open(sessa_session_dir + session_file_name[p], 'a') as session_file:
        print(sessa_session_dir + session_file_name[p])
        #session_file.write('\\ MODEL SIMULATE')
        #session_file.write('\\MODEL SAVE INTENSITIES {}{}'.format(sessa_result_dir, session_file_name[p]))
        print('\MODEL SIMULATE', file=session_file)
        print('\MODEL SAVE INTENSITIES "{}{}"'.format(sessa_result_dir, session_file_name[p]), file=session_file) #adds command to save in results folder with same name as session file
        
        #%%
# Calls SESSA via cmd and execute the session files 
    
os.chdir(sessa_dir)
for i in range(len(session_file_name)):
    #print(range(len(sessa_file_path)))
    print('Now executing session file: "%s," ' % session_file_name[i] + str(i+1) + ' out of '+str(len(session_file_name)))
    subprocess.call('sessa.exe -s "%s"' % sessa_file_path[i])
    #subprocess.call('sessa.exe -s "%s"' % sessa_file_path[i])
# NOTE: The session files now have extra commend generated by this script (Model
#simulate and Model Save....)
# The script below will read through all raw result file and generate a csv file that
#contains raw photoelectron intensity for analysis
# For sorting the files in order
numbers = re.compile(r'(\d+)')
def numericalsort(value):
 parts = numbers.split(value)
 parts[1::2] = map(int, parts[1::2])
 return parts

 #%%
# Directory of all result files
#sessa_result_dir = sessa_file_path #this is already set at top?
# The folder where result files are located, grabs all result files' path into a list
result_file_path = sorted(glob.glob(sessa_result_dir+'*.adf'), key=numericalsort)
#result_file_path = r'C:\Users\omn\Nextcloud\SESSA Python\session files 2020-02-26 11-35\results\%.adf'
result_file_names = [] # creates empty list to store file names
for (dirpath, firnames, filenames) in os.walk(sessa_result_dir):
   result_file_names.extend(filenames) # save file names into a list
   break
f = open(result_file_path[0]) # Grab the simulated peaks
result_header = (f.readline().split(','))
f.close()
peak_names = result_header[-1].split(' ')
peak_names = [w.replace('\n', '') for w in peak_names]
# remove the extra "\n" from end of the peak name
peak_names.insert(0, '') # empty string at the beginning for formatting
del peak_names[0:3] # remove non-peak information
result = [] # empty list for storing peak result
for p in range(len(result_file_path)): # loop for all files
 f = open(result_file_path[p])
 
 f.readline() # skip the first line (which is just header information)
 temp = (f.readline().split(' ')) # Read space delimited result
 temp = temp[24:] # Remove extra result
 del temp[-1] # Remove extra result
 temp.insert(0, result_file_names[p])
 result.append(temp) # Add to result list
 f.close()
# Now, write into csv file for
os.chdir(sessa_result_dir) # Point to fold to generate csv file
dt = str(datetime.now()) # grab current time
dt = dt.split() # split date and time
with open('result.csv', 'w', newline='') as csvfile: # Saving the result into a csv
#(excel) file
 writer = csv.writer(csvfile, delimiter=',')
 writer.writerow([])
 writer.writerow(['date', 'time'])
 writer.writerow(dt)
 writer.writerow([])
 writer.writerow(peak_names)
 writer.writerows(result)
# End of code\MODEL SIMULATE
